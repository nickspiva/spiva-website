[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nTesting website!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "spiva-website",
    "section": "",
    "text": "TidyTuesday Pokemon!\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 31, 2025\n\n\nNicky Spiva\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 18, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 15, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tidy-tuesday-3-31-2025/tt3-31-25.html",
    "href": "posts/tidy-tuesday-3-31-2025/tt3-31-25.html",
    "title": "#TidyTuesday Pokemon!",
    "section": "",
    "text": "# Using R\n# Option 1: tidytuesdayR R package \n## install.packages(\"tidytuesdayR\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(colorspace)\n\nluv_c &lt;- luv_colours\n\ntuesdata &lt;- tidytuesdayR::tt_load('2025-04-01')\n\n---- Compiling #TidyTuesday Information for 2025-04-01 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"pokemon_df.csv\"\n\npokemon_df &lt;- tuesdata$pokemon_df\n\nHere’s an idea to explore, what is the relationship between a Pokemon’s type and their colors? Can we do NBA style heatmaps for primary, secondary, and tertiary colors for each type of pokemon? Perhaps bug types have colors like leaf green and bright yellow, can we see that on a hex-tile?\nHow are colors even represented numerically? I’m familiar with RGB type scales, which are essentially three-dimensional numerical representtions of colors right?\nDoes converting\nhttps://stackoverflow.com/questions/21490210/how-to-plot-a-colour-wheel-by-using-ggplot - article regaridng mapping color wheels with r.\nSeems like HSV values are another three dimensional numerical representation of colors (hue, 360 wheel, 0 red, green 120, blue 240), saturation (0 gray, 100 pure color), value (brightness - 0 black, 100 full brightness)\nOk! Hex is RGB, just using a hexadecimal system. #RRGGBB, going from OO to FF in terms of intensity for 0-255 values for each color.\nI’m imagining visualization kind of like how they do population density, but instead of a spatial map of a city, we just have a color wheel, and the heights of various colors are based on the frequency of that color’s appearance in the type.\nTo do this, I would need a few things - first a way to map out radially and assign colors to points/locations, next I would need a way to modify points of heights, or potentially to only display points that are present?\nGoogling is tricky for this! “mapping/graphing colors” type queries result in stuff about how to generally use color in the tidyverse, not how to actually visualize colors themselves.\nIt seems like this code basically generates it:\n\nr  &lt;- seq(0,1,length=201)\nth &lt;- seq(0,2*pi, length=201)\nd  &lt;- expand.grid(r=r,th=th)\ngg &lt;- with(d,data.frame(d,x=r*sin(th),y=r*cos(th),\n                        z=hcl(h=360*th/(2*pi),c=100*r, l=65)))\nggplot(gg) +\n  geom_point(aes(x,y, color=z), size=3)+\n  scale_color_identity()+\n  labs(x=\"\",y=\"\") +\n  coord_fixed()\n\n\n\n\n\n\n\n\nBut how to map out specific colors?\nLooking at the help documentation for scale_color_identity seems to provide some examples.\n\nI think this could kind of work? Each graph could be a type, and each point could be a pokemon’s primary color. But I would need a way to translate hex colors into LUV colors\nI ran into a frustrating issue where I was trying to mutate using col2rgb but it wasn’t vectorized so I just had the first color copied for the\n\nlibrary(purrr)\nlibrary(colorspace)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.4.3\n\ntest0 &lt;- col2rgb(\"#abcdef\")\ntest1 &lt;- col2rgb(\"#abcdef\")[2]\n\n# pokemon_df_rgb &lt;- pokemon_df |&gt; mutate(\n#   red = map_dbl(color_1, ~ col2rgb(.x)[1]), \n#   green = map_dbl(color_1, ~ col2rgb(.x)[2]), \n#   blue = map_dbl(color_1, ~ col2rgb(.x)[3]),\n#   red2 = map_dbl(color_2, ~ col2rgb(.x)[1]), \n#   green2 = map_dbl(color_2, ~ col2rgb(.x)[2]), \n#   blue2 = map_dbl(color_2, ~ col2rgb(.x)[3]),\n#   red3 = map_dbl(color_3, ~ col2rgb(.x)[1]), \n#   green3 = map_dbl(color_3, ~ col2rgb(.x)[2]), \n#   blue3 = map_dbl(color_3, ~ col2rgb(.x)[3])\n# ) \n# \n# # Create a matrix of normalized RGB values\n# rgb_matrix &lt;- as.matrix(pokemon_df_rgb %&gt;% select(red, green, blue) / 255)\n# rgb_matrix2 &lt;- as.matrix(pokemon_df_rgb %&gt;% select(red2, green2, blue2) / 255)\n# rgb_matrix3 &lt;- as.matrix(pokemon_df_rgb %&gt;% select(red3, green3, blue3) / 255)\n# \n# # Convert RGB to Luv\n# luv_values &lt;- convertColor(rgb_matrix, from = \"sRGB\", to = \"Luv\")\n# luv_values2 &lt;- convertColor(rgb_matrix2, from = \"sRGB\", to = \"Luv\")\n# luv_values3 &lt;- convertColor(rgb_matrix3, from = \"sRGB\", to = \"Luv\")\n# \n# \n# \n# # Add Luv values to the dataframe\n# pokemon_df_rgb &lt;- pokemon_df_rgb %&gt;%\n#   mutate(\n#     L = luv_values[, 1],\n#     u = luv_values[, 2],\n#     v = luv_values[, 3]\n#   )\n# \n# pokemon_df_rgb &lt;- pokemon_df_rgb %&gt;%\n#   mutate(\n#     L2 = luv_values2[, 1],\n#     u2 = luv_values2[, 2],\n#     v2 = luv_values2[, 3]\n#   )\n# \n# pokemon_df_rgb &lt;- pokemon_df_rgb %&gt;%\n#   mutate(\n#     L3 = luv_values3[, 1],\n#     u3 = luv_values3[, 2],\n#     v3 = luv_values3[, 3]\n#   )\n# \n# ggplot(pokemon_df_rgb, aes(x=u, y=v)) +\n#   geom_point(aes(colour=color_1, size = 2)) +\n#   scale_color_identity() +\n#   coord_fixed()\n# \n# ggplot(pokemon_df_rgb, aes(x=u2, y=v2)) +\n#   geom_point(aes(colour=color_1, size = 2)) +\n#   scale_color_identity() +\n#   coord_fixed()\n# \n# ggplot(pokemon_df_rgb, aes(x=u3, y=v3)) +\n#   geom_point(aes(colour=color_1, size = 2)) +\n#   scale_color_identity() +\n#   coord_fixed()\n\n# Function to extract and normalize RGB values and convert to Luv\nextract_and_convert &lt;- function(df, color_col) {\n  rgb_matrix &lt;- df %&gt;%\n    mutate(\n      red = map_dbl(.data[[color_col]], ~ ifelse(is.na(.x), NA, col2rgb(.x)[1])), \n      green = map_dbl(.data[[color_col]], ~ ifelse(is.na(.x), NA, col2rgb(.x)[2])),\n      blue = map_dbl(.data[[color_col]], ~ ifelse(is.na(.x), NA, col2rgb(.x)[3]))\n    ) %&gt;%\n    select(red, green, blue) %&gt;%\n    as.matrix() / 255\n  \n  # Handle NA values in the RGB matrix\n  rgb_matrix[is.na(rgb_matrix)] &lt;- 0\n  \n  luv_values &lt;- convertColor(rgb_matrix, from = \"sRGB\", to = \"Luv\")\n  \n  # Restore NA values in the Luv matrix\n  luv_values[rowSums(rgb_matrix == 0) == 3, ] &lt;- NA\n  \n  return(luv_values)\n}\n\n# Extract and convert colors\nluv_values1 &lt;- extract_and_convert(pokemon_df, \"color_1\")\nluv_values2 &lt;- extract_and_convert(pokemon_df, \"color_2\")\nluv_values3 &lt;- extract_and_convert(pokemon_df, \"color_f\")\n\n# Add Luv values to the dataframe\npokemon_df_rgb &lt;- pokemon_df %&gt;%\n  mutate(\n    L = luv_values1[, 1],\n    u = luv_values1[, 2],\n    v = luv_values1[, 3],\n    L2 = luv_values2[, 1],\n    u2 = luv_values2[, 2],\n    v2 = luv_values2[, 3],\n    L3 = luv_values3[, 1],\n    u3 = luv_values3[, 2],\n    v3 = luv_values3[, 3]\n  )\n\n# Plotting\nplots &lt;- list(\n  ggplot(pokemon_df_rgb, aes(x=u, y=v)) +\n    geom_point(aes(colour=color_1, size = 2)) +\n    scale_color_identity() +\n    coord_fixed(),\n  \n  ggplot(pokemon_df_rgb, aes(x=u2, y=v2)) +\n    geom_point(aes(colour=color_1, size = 2)) +\n    scale_color_identity() +\n    coord_fixed(),\n  \n  ggplot(pokemon_df_rgb, aes(x=u3, y=v3)) +\n    geom_point(aes(colour=color_1, size = 2)) +\n    scale_color_identity() +\n    coord_fixed()\n)\n\n# Print plots\n# for (plot in plots) {\n#   print(plot)\n# }\n\n\n\np1 &lt;- ggplot(pokemon_df_rgb, aes(x=u3, y=v3)) +\n    geom_point(aes(colour=color_f, text=pokemon)) +\n    scale_color_identity() +\n    coord_fixed() + \n    facet_wrap(vars(type_1)) +\n    theme_gray()\n\nWarning in geom_point(aes(colour = color_f, text = pokemon)): Ignoring unknown\naesthetics: text\n\nggplotly(p1, tooltip=\"text\")\n\n\n\n\n\npart 2\n\n# Remove rows with NA values before plotting\npokemon_df_rgb &lt;- pokemon_df_rgb |&gt; mutate(\n  fancy_label = paste0(pokemon, \"&lt;br&gt;\", type_2), \n  color_graph = ifelse(is.na(color_f), color_1, color_f)\n)\n\n# print(pokemon_df_rgb$u3)\n\n# Define UI for the Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Interactive Pokémon Type Plot\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"type\", \"Select Pokémon Type:\", choices = c(\"All Types\", unique(pokemon_df_rgb$type_1)))\n    ),\n    \n    mainPanel(\n      plotlyOutput(\"typePlot\")\n    )\n  )\n)\n\n# print(pokemon_df_rgb$u)\n\n# Define server logic for the Shiny app\nserver &lt;- function(input, output) {\n  output$typePlot &lt;- renderPlotly({\n    selected_type &lt;- input$type\n    \n    if (selected_type == \"All Types\") {\n      filtered_data &lt;- pokemon_df_rgb\n    } else {\n      filtered_data &lt;- pokemon_df_rgb %&gt;%\n        filter(type_1 == selected_type)\n    }\n    \n    # print(pokemon_df_rgb$u3)\n    \n    x_limits &lt;- range(pokemon_df_rgb$u3, na.rm = TRUE)\n    y_limits &lt;- range(pokemon_df_rgb$v3, na.rm = TRUE)\n    \n    # print(filtered_data$u3)\n    \n    p &lt;- ggplot(filtered_data, aes(x = u3, y = v3)) +\n      geom_point(aes(colour = color_graph, text=fancy_label)) +\n      scale_color_identity() +\n      coord_fixed(xlim = x_limits, ylim = y_limits) +\n      ggtitle(paste(\"Pokémon Type:\", selected_type))\n    \n    ggplotly(p, tooltip=\"text\")\n  })\n}\n\n# Run the Shiny app\n# shinyApp(ui = ui, server = server)"
  }
]